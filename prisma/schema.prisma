generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                 @id @default(cuid())
  name            String?
  image           String?
  email           String?                 @unique
  emailVerified   String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now()) @updatedAt
  games           UserGameCollection[]
  playlists       Playlist[]
  playlistFollows FollowersOnPlaylists[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id                    Int                  @id @default(autoincrement())
  gameId                Int                  @unique
  title                 String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  cover                 Cover?
  artworks              Artwork[]
  screenshots           Screenshot[]
  users                 UserGameCollection[]
  genres                GenresOnGames[]
  aggregatedRating      Float?
  aggregatedRatingCount Int?
  storyline             String?
  releaseDate           Int?
  playlists             PlaylistsOnGames[]
}

model UserGameCollection {
  userId       String
  gameId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deleted      Boolean  @default(false)
  game         Game     @relation(fields: [gameId], references: [gameId])
  user         User     @relation(fields: [userId], references: [id])
  played       Boolean  @default(false)
  completed    Boolean  @default(false)
  playerRating Int?
  starred      Boolean  @default(false)

  @@id([userId, gameId])
}

model Playlist {
  id        Int                    @id @default(autoincrement())
  name      String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  user      User                   @relation(fields: [userId], references: [id])
  userId    String
  games     PlaylistsOnGames[]
  followers FollowersOnPlaylists[]
}

model PlaylistsOnGames {
  gameId     Int
  playlistId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  game       Game     @relation(fields: [gameId], references: [gameId])
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@id([gameId, playlistId])
}

model FollowersOnPlaylists {
  userId     String
  playlistId Int
  createdAt  DateTime @default(now())
  follower   User     @relation(fields: [userId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id])

  @@id([userId, playlistId])
}

model Genre {
  id         Int             @id @default(autoincrement())
  externalId Int             @unique
  name       String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  games      GenresOnGames[]
}

model GenresOnGames {
  gameId    Int
  genreId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [gameId])
  genre     Genre    @relation(fields: [genreId], references: [id])

  @@id([gameId, genreId])
}

model Cover {
  id        Int      @id @default(autoincrement())
  imageId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    Int      @unique
  game      Game     @relation(fields: [gameId], references: [gameId])
}

model Artwork {
  id        Int      @id @default(autoincrement())
  imageId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [gameId])
}

model Screenshot {
  id        Int      @id @default(autoincrement())
  imageId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [gameId])
}
